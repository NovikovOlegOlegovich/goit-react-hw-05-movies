{"version":3,"file":"static/js/581.e480207c.chunk.js","mappings":"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","sources":["API/index.js","components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","components/FilmDeteilsLinks/FilmDeteilsLinks.styled.jsx","components/FilmDeteilsLinks/FilmDeteilsLinks.jsx","pages/MovieDetails.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org';\nconst API_KEY = '91ae85947dca7203ec2b4d7841a3c73b';\n\nexport const getTrendingFilms = async () => {\n  const response = await fetch(\n    `${BASE_URL}/3/trending/movie/day?api_key=${API_KEY}&language=en-US`\n  );\n  if (!response.ok) {\n    throw new Error('Ops .... ');\n  }\n  const { results } = await response.json();\n\n  return results;\n};\n\nexport const getFilmById = async id => {\n  const response = await fetch(\n    `${BASE_URL}/3/movie/${id}?api_key=${API_KEY}&language=en - US`\n  );\n  if (!response.ok) {\n    throw new Error('Ops .... ');\n  }\n  const film = await response.json();\n\n  return film;\n};\n\nexport const getFilmByQuery = async query => {\n  const response = await fetch(\n    `${BASE_URL}/3/search/movie?query=${query}&api_key=${API_KEY}&language=en - US`\n  );\n  if (!response.ok) {\n    throw new Error('Ops .... ');\n  }\n  const { results } = await response.json();\n\n  return results;\n};\n\nexport const getActorsByFilmId = async id => {\n  const response = await fetch(\n    `${BASE_URL}/3/movie/${id}/credits?api_key=${API_KEY}&language=en - US`\n  );\n  if (!response.ok) {\n    throw new Error('Ops .... ');\n  }\n  const { cast } = await response.json();\n\n  return cast;\n};\n\nexport const getReviewsByFilmId = async id => {\n  const response = await fetch(\n    `${BASE_URL}/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  if (!response.ok) {\n    throw new Error('Ops .... ');\n  }\n  const { results } = await response.json();\n  return results;\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const SearchFilmItem = styled.div`\n  display: flex;\n  font-size: 40px;\n  color: #010101;\n  margin: 15px;\n`;\n\nexport const Poster = styled.img``;\n\nexport const FilmCardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 20px;\n  font-size: 40px;\n  color: #010101;\n`;\n\nexport const EverageDescription = styled.p`\n  font-size: 25px;\n  margin: 0px;\n  margin-bottom: 20px;\n`;\n\nexport const HederOverview = styled.h2`\n  font-size: 35px;\n  margin: 0px;\n`;\n\nexport const OverviewDescription = styled.p`\n  font-size: 25px;\n`;\n\nexport const HederGenres = styled.h3`\n  font-size: 35px;\n  margin: 0px;\n`;\n\nexport const GenresDescription = styled.p`\n  font-size: 25px;\n`;\n\nexport const FilmTitle = styled.h1`\n  margin: 0px;\n  margin-bottom: 20px;\n  font-size: 35px;\n  color: #000000;\n`;\n\nexport const BackLinkLocationRef = styled(Link)`\n  font-size: 20px;\n  font-weight: 500;\n\n  text-decoration: none;\n\n  padding: 2px 8px;\n\n  border: 1px solid transparent;\n  border-radius: 5px;\n\n  color: white;\n  background-color: #646565;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport {\n  SearchFilmItem,\n  Poster,\n  FilmCardWrapper,\n  EverageDescription,\n  HederOverview,\n  OverviewDescription,\n  HederGenres,\n  GenresDescription,\n  FilmTitle,\n  BackLinkLocationRef,\n} from './MovieCard.styled';\n\nconst MovieCard = ({ film }) => {\n  const { poster_path, original_title, vote_average, overview, genres } = film;\n\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  const ganres = () => {\n    let stringOfGanres = '';\n    genres?.map(ganre => (stringOfGanres += ` ${ganre.name}`));\n    return stringOfGanres;\n  };\n\n  const listOfGanres = ganres();\n  const average = vote_average?.toFixed(1);\n  const defaultPoster =\n    'https://placehold.co/500x750?text=Poster+not+available';\n  return (\n    <>\n      <BackLinkLocationRef to={backLinkLocationRef.current}>\n        Back\n      </BackLinkLocationRef>\n      <SearchFilmItem>\n        <Poster\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/original${poster_path}`\n              : defaultPoster\n          }\n          alt=\"poster\"\n          height=\"650\"\n        ></Poster>\n        <FilmCardWrapper>\n          <FilmTitle>{original_title}</FilmTitle>\n          <EverageDescription>User Score: {average}</EverageDescription>\n          <HederOverview>Overview</HederOverview>\n          <OverviewDescription>{overview}</OverviewDescription>\n          <HederGenres>Genres</HederGenres>\n          <GenresDescription>{listOfGanres}</GenresDescription>\n        </FilmCardWrapper>\n      </SearchFilmItem>\n    </>\n  );\n};\n\nMovieCard.propTypes = {\n  searchFilm: PropTypes.shape({\n    poster_path: PropTypes.string,\n    original_title: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    overview: PropTypes.string,\n    genres: PropTypes.array,\n  }),\n};\n\nexport default React.memo(MovieCard);\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const DeteilLinksList = styled.ul`\n  list-style-type: none;\n  display: flex;\n  padding-bottom: 10px;\n  border-bottom: 1px solid black;\n`;\nexport const DeteilLinksItem = styled.li`\n  &:first-of-type {\n    margin-right: 10px;\n  }\n`;\nexport const DeteilLinks = styled(NavLink)`\n  font-size: 20px;\n  font-weight: 500;\n\n  text-decoration: none;\n\n  padding: 5px 16px;\n\n  border: 1px solid transparent;\n  border-radius: 5px;\n\n  color: black;\n\n  width: 500px;\n\n  &.active {\n    color: white;\n    background-color: #2f788b;\n  }\n`;\n","import {\n  DeteilLinks,\n  DeteilLinksList,\n  DeteilLinksItem,\n} from './FilmDeteilsLinks.styled';\n\nconst FilmDeteilsLinks = () => {\n  return (\n    <DeteilLinksList>\n      <DeteilLinksItem>\n        <DeteilLinks to=\"cast\">cast</DeteilLinks>\n      </DeteilLinksItem>\n      <DeteilLinksItem>\n        <DeteilLinks to=\"reviews\">reviews</DeteilLinks>\n      </DeteilLinksItem>\n    </DeteilLinksList>\n  );\n};\nexport default FilmDeteilsLinks;\n","import { useEffect, useState } from 'react';\nimport { Outlet, useParams } from 'react-router-dom';\nimport { getFilmById } from '../API/index';\nimport MovieCard from '../components/MovieCard';\nimport FilmDeteilsLinks from '../components/FilmDeteilsLinks';\n\nconst MovieDetails = () => {\n  const [searchFilm, setSearchFilm] = useState('');\n  const [error, setError] = useState(null);\n  const film = useParams();\n  const query = film.filmId;\n\n  useEffect(() => {\n    const fetchFilmsById = async () => {\n      try {\n        const filmById = await getFilmById(query);\n\n        if (!filmById) {\n          throw new Error('No matches found');\n        }\n\n        setSearchFilm(filmById);\n      } catch (errors) {\n        setError(errors.message);\n      }\n    };\n    fetchFilmsById();\n  }, [query]);\n\n  console.log(error);\n\n  return (\n    <>\n      <MovieCard film={searchFilm} />\n      <FilmDeteilsLinks />\n      <Outlet />\n    </>\n  );\n};\n\nexport default MovieDetails;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["BASE_URL","API_KEY","getTrendingFilms","fetch","response","ok","Error","json","results","getFilmById","id","film","getFilmByQuery","query","getActorsByFilmId","cast","getReviewsByFilmId","SearchFilmItem","styled","Poster","FilmCardWrapper","EverageDescription","HederOverview","OverviewDescription","HederGenres","GenresDescription","FilmTitle","BackLinkLocationRef","Link","MovieCard","poster_path","original_title","vote_average","overview","genres","location","useLocation","backLinkLocationRef","useRef","state","from","listOfGanres","stringOfGanres","map","ganre","name","ganres","average","toFixed","to","current","src","alt","height","React","DeteilLinksList","DeteilLinksItem","DeteilLinks","NavLink","useState","searchFilm","setSearchFilm","error","setError","useParams","filmId","useEffect","fetchFilmsById","filmById","message","console","log","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}